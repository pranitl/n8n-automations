{"createdAt":"2025-06-01T19:18:35.426Z","updatedAt":"2025-06-02T19:04:04.000Z","id":"5jU7os4XUSUQmEjm","name":"SEO copy","active":false,"isArchived":true,"nodes":[{"parameters":{"model":"openai/o1","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[240,500],"id":"2f2d8903-ae82-4285-b2fd-bcd80817be59","name":"OpenRouter Chat Model","credentials":{"openRouterApi":{"id":"B8JTIrGoqbbInPF7","name":"OpenRouter account"}}},{"parameters":{"jsonSchemaExample":"{\n  \"output\": {\n    \"primary_keywords\": [\n      \"keyword 1 related to primary_topic and location\",\n      \"keyword 2 related to primary_topic and location\"\n    ],\n    \"long_tail_keywords\": [\n      {\n        \"keyword\": \"long-tail variation example for primary_topic\",\n        \"intent\": \"informational\"\n      },\n      {\n        \"keyword\": \"how to buy product related to primary_topic\",\n        \"intent\": \"transactional\"\n      },\n      {\n        \"keyword\": \"best service for primary_topic in location\",\n        \"intent\": \"commercial\"\n      }\n    ],\n    \"question_based_keywords\": [\n      \"What is {{ $json.primary_topic }}?\",\n      \"How does {{ $json.primary_topic }} work in {{ $json.location }}?\"\n    ],\n    \"related_topics\": [\n      \"adjacent topic A for primary_topic\",\n      \"broader concept B for primary_topic\"\n    ]\n  }\n}"},"id":"2a6228b7-1cac-4b25-a727-7e2ad4a4802b","name":"Structured Output Parser1","type":"@n8n/n8n-nodes-langchain.outputParserStructured","position":[380,500],"typeVersion":1.2},{"parameters":{"promptType":"define","text":"=I need to create comprehensive SEO keyword research for content about:\n{{ $json.primary_topic }}\n\nMy target audience is: {{ $json.target_audience }}\nThis will be used for a: {{ $json.content_type }}\nLocation: {{ $json.location }}\nLanguage: {{ $json.language }}\n\nPlease generate the following, ensuring all content is highly relevant to the '{{ $json.primary_topic }}' and incorporates the '{{ $json.location }}' and '{{ $json.language }}' where appropriate:\n\n1.  Exactly 2 primary keywords.\n2.  Exactly 30 long-tail keyword variations. For each long-tail keyword, specify its search intent. The 'intent' field MUST be one of the following exact strings: \"informational\", \"commercial\", or \"transactional\".\n3.  Exactly 15 question-based keywords.\n4.  Exactly 10 related topics.\n\nFormat the output STRICTLY as a single, valid JSON object with a top-level key named \"output\". Inside the \"output\" object, include the categories as specified in the example structure below. Do not include any explanatory text outside of the JSON structure itself.","hasOutputParser":true,"options":{}},"id":"0008d566-23d9-4f6c-b80f-1de48938df8f","name":"Topic Expansion1","type":"@n8n/n8n-nodes-langchain.agent","position":[220,300],"typeVersion":1.8},{"parameters":{"resource":"labs","operation":"get-keyword-difficulty","keywords":{"values":[{"value":"={{ $json['output.primary_keywords'] }}"}]},"location_name_required":"={{ $('Set relevant fields1').item.json.location }}","language_name_required":"={{ $('Set relevant fields1').item.json.language }}"},"id":"f784cf9d-7330-4135-87f9-95eeb1333c2b","name":"Keyword Difficulty1","type":"n8n-nodes-dataforseo.dataForSeo","position":[820,440],"typeVersion":1,"credentials":{"dataForSeoApi":{"id":"t2AvCYTx56jzJo20","name":"DataForSEO account"}}},{"parameters":{"resource":"keywords_data","keywords":{"values":[{"value":"={{ $json['output.primary_keywords'] }}"}]},"location_name":"={{ $('Set relevant fields1').item.json.location }}","language_name":"={{ $('Set relevant fields1').item.json.language }}","date_from":{},"date_to":{}},"id":"889f074b-e2e8-4e79-81bd-d0a37c73574a","name":"Search Volume & CPC1","type":"n8n-nodes-dataforseo.dataForSeo","position":[820,240],"typeVersion":1,"credentials":{"dataForSeoApi":{"id":"t2AvCYTx56jzJo20","name":"DataForSEO account"}}},{"parameters":{"fieldToSplitOut":"output.primary_keywords","options":{}},"id":"c20c20a9-4882-48f7-b411-bac437716df7","name":"split primary keywords1","type":"n8n-nodes-base.splitOut","position":[600,340],"typeVersion":1},{"parameters":{"promptType":"define","text":"=# Role: Act as an expert SEO Strategist and Content Planner.\n\n# Context:\n# You are creating an actionable SEO Keyword Strategy & Content Brief based on prior AI-driven keyword generation and competitor analysis.\n# The goal is content creation for the 'Primary Topic', targeting the specified 'Target Audience' and 'Content Type' in the given 'Location' and 'Language'.\n# Data provided includes initial keyword ideas (primary, long-tail, questions), keyword metrics (volume, difficulty), related topics, and competitor analysis insights (their likely keywords, content gaps, unique angles).\n\n# Input Parameters for this Task:\nPrimary Topic: {{ $json.primary_topic }}\nTarget Audience: {{ $json.target_audience }}\nContent Type: {{ $json.content_type }}\nLocation: {{ $json.location }}\nLanguage: {{ $json.language }}\n\n# Your Task:\n# Analyze the provided input parameters and the detailed 'DATA' section below.\n# Synthesize this information into a clear, concise, and actionable SEO Keyword Strategy & Content Brief.\n# Structure the output logically using Markdown. Focus on providing insights and actionable recommendations, not just listing data. Explain the 'why' behind key recommendations. Keep the language easy to understand, assuming the reader (e.g., a content writer or marketing manager) understands basic SEO concepts but isn't necessarily a deep expert.\n\n# Required Output Sections (Use Markdown Headers):\n\n## 1. Executive Summary\n   - **Objective:** Briefly state the primary goal of creating content on this topic for this audience (e.g., \"Attract [Target Audience] seeking information on [Primary Topic]...\" or \"Position our brand as a thought leader for [Target Audience] regarding [Primary Topic]\").\n   - **Key Opportunity:** Summarize the most significant keyword opportunity identified (e.g., \"Target the high-volume term '[Example Keyword]' while capturing related informational queries via long-tail variations.\")\n   - **Competitor Angle:** Briefly mention the main strategic takeaway from the competitor analysis (e.g., \"Competitors focus heavily on [X], leaving an opportunity to address [Y] or provide a unique angle on [Z].\")\n\n## 2. Target Keyword Strategy & Rationale\n   - **Primary Target Keywords:**\n      - List the top 5-10 recommended primary keywords.\n      - For each, include Search Volume (SV) and Keyword Difficulty (KD).\n      - **Add brief commentary/rationale for each group or key term:** Why were these chosen? (e.g., \"High relevance and strong search volume despite moderate difficulty,\" or \"Balances primary topic focus with user search behavior.\")\n   - **Secondary & Long-Tail Opportunities:**\n      - List the top 10-15 recommended long-tail and secondary keywords.\n      - Group them by likely Search Intent (e.g., Informational, Commercial, Transactional) if discernible from the input data.\n      - **Add brief commentary on the overall opportunity:** What specific user needs or funnel stages do these address? Note any clusters with particularly low competition.\n   - **Key Question Keywords:**\n      - List the top 5 question-based keywords the content *must* answer.\n      - **Add brief commentary:** Why are these questions crucial for the target audience or content goals?\n\n## 3. Competitive Landscape & Content Gaps\n   - **Competitor Focus:** Briefly summarize the main keyword themes or angles competitors seem to be targeting, based on the provided analysis.\n   - **Identified Gaps/Opportunities:** Highlight 1-3 specific content gaps, under-served intents, or unique angles identified from the competitor analysis that this content piece should leverage. Be specific (e.g., \"Competitors explain 'what', but not 'how to implement',\" or \"Lack of practical examples for [Target Audience]\").\n\n## 4. Content Outline & Actionable Recommendations\n    - **Proposed Content Pieces & Detailed Outlines:**\n        For each of the SEO titles proposed in section 5, provide a detailed content outline.\n        Structure this as a JSON array embedded within a ```json ... ``` code block.\n        Each object in the array should represent one proposed content piece and include:\n            1.  `proposed_seo_title`: The exact SEO title (which will also be listed in Section 5).\n            2.  `target_user_intent`: Briefly describe the primary user intent this piece aims to satisfy.\n            3.  `key_questions_to_answer`: An array of specific questions (from your keyword research or inferred) this piece must answer.\n            4.  `primary_keywords_for_this_piece`: An array of 2-3 primary keywords that are most central to this specific title and outline.\n            5.  `recommended_h2_structure_with_clustered_topics`: An array of objects, where each object represents an H2 section. Each H2 object should have:\n                - `h2_heading`: The proposed H2 heading text.\n                - `clustered_sub_topics`: An array of strings, detailing specific sub-topics, key points, or long-tail keywords to be covered under this H2.\n            6.  `content_enhancement_suggestions_specific_to_this_piece`: An array of 1-2 specific content enhancement ideas (e.g., \"Include a comparison table of X and Y,\" \"Embed a short video explaining Z,\" \"Add a downloadable checklist for...\") relevant to this specific topic.\n    - **Overall Keyword Integration Strategy:** Briefly suggest how to naturally incorporate the broader list of primary, long-tail, and question keywords from Section 2 across all proposed content.\n    - **General Content Enhancement Recommendations:** Provide 1-2 *general* recommendations applicable to most content (e.g., \"Ensure a strong internal linking strategy,\" \"Optimize images with alt text\").\n\nHere is an example of a given output:\n<content_example>\n## 4. Content Outline & Actionable Recommendations\n    - **Proposed Content Pieces & Detailed Outlines:**\n    ```json\n    [\n      {\n        \"proposed_seo_title\": \"Senior Home Care in Winchester, MA: Your Complete Guide for Aging Parents\",\n        \"target_user_intent\": \"Comprehensive understanding of senior home care options, costs, and processes in Winchester for adult children.\",\n        \"key_questions_to_answer\": [\n          \"What is the difference between home health care and home care?\",\n          \"How much does senior home care cost in Winchester?\",\n          \"Does Medicare pay for in-home senior care?\"\n        ],\n        \"primary_keywords_for_this_piece\": [\"senior home care Winchester\", \"in-home senior care Winchester\", \"aging parents care guide\"],\n        \"recommended_h2_structure_with_clustered_topics\": [\n          {\n            \"h2_heading\": \"Understanding Senior Home Care vs. Home Health Care\",\n            \"clustered_sub_topics\": [\n              \"Define home care (non-medical, companionship, personal care)\",\n              \"Define home health care (skilled nursing, therapy, medical needs)\",\n              \"Key differences in services, payment, and regulation in MA\"\n            ]\n          },\n          {\n            \"h2_heading\": \"Navigating Costs and Payment Options in Winchester\",\n            \"clustered_sub_topics\": [\n              \"Average hourly/daily rates for senior home care in Winchester\",\n              \"Factors influencing cost (level of care, hours needed)\",\n              \"Role of private pay, long-term care insurance\",\n              \"Clarify Medicare/Medicaid limitations for non-medical home care (as per our business model: private pay/insurance focus)\"\n            ]\n          },\n          {\n            \"h2_heading\": \"Choosing the Right Home Care Agency for Your Family\",\n            \"clustered_sub_topics\": [\n              \"Questions to ask potential agencies\",\n              \"Importance of caregiver screening and qualifications\",\n              \"Reviewing contracts and service agreements\"\n            ]\n          }\n        ],\n        \"content_enhancement_suggestions_specific_to_this_piece\": [\n          \"Include a downloadable checklist: 'Questions to Ask a Home Care Agency'.\",\n          \"Embed a short video testimonial from a Winchester family (if available).\"\n        ]\n      },\n      {\n        \"proposed_seo_title\": \"How to Afford Senior Home Care in Winchester: Cost, Coverage & Expert Tips\",\n        \"target_user_intent\": \"Detailed financial guidance for affording senior home care in Winchester, focusing on private pay and insurance.\",\n        \"key_questions_to_answer\": [\n          \"How much does 24-hour senior home care cost in Winchester?\",\n          \"What are private pay options for senior care?\",\n          \"How does long-term care insurance work for home care?\"\n        ],\n        \"primary_keywords_for_this_piece\": [\"afford senior home care Winchester\", \"senior care cost Winchester\", \"private pay home care MA\"],\n        \"recommended_h2_structure_with_clustered_topics\": [\n          {\n            \"h2_heading\": \"Understanding the Full Cost of Home Care in Winchester\",\n            \"clustered_sub_topics\": [\n              \"Breakdown of potential costs: hourly rates, live-in care, overnight care\",\n              \"Hidden fees to watch out for\",\n              \"Comparing costs to assisted living or nursing homes\"\n            ]\n          },\n          {\n            \"h2_heading\": \"Funding Options: Private Pay and Long-Term Care Insurance\",\n            \"clustered_sub_topics\": [\n              \"Strategies for private payment (savings, assets)\",\n              \"How to effectively use long-term care insurance policies\",\n              \"Understanding policy benefits and claim processes\"\n            ]\n          }\n        ],\n        \"content_enhancement_suggestions_specific_to_this_piece\": [\n          \"Create an interactive cost calculator (simplified).\",\n          \"Provide a template letter for inquiring about LTC insurance benefits.\"\n        ]\n      }\n    ]\n    ```\n    - **Overall Keyword Integration Strategy:** ...\n    - **General Content Enhancement Recommendations:** ...\n</content_example>\n\n## 5. Proposed SEO Titles for Content Generation\n    - **List of SEO Titles:**\n        List each `proposed_seo_title` that was defined within the JSON array in \"Section 4: Proposed Content Pieces & Detailed Outlines.\"\n        These are the titles for which detailed outlines have been provided and which will be considered for content generation.\n        Ensure this list accurately reflects the titles from the JSON structure in Section 4. No new or alternative titles should be introduced here; this section serves as a summary list for readability.\n\n# DATA for Analysis:\n# (Analyze the following JSON data containing keyword suggestions, metrics, and competitor analysis results)\n```json\n{{ $json.data.toJsonString() }}\n```\n\nFinal Output Format: Ensure the entire response is well-structured, clean Markdown, ready to be used as a content brief.","options":{}},"id":"e76ff775-e5fa-421d-a57a-9dbbbbc6e4d0","name":"Final Keyword Strategy1","type":"@n8n/n8n-nodes-langchain.agent","position":[2180,280],"typeVersion":1.8},{"parameters":{"httpMethod":"POST","path":"27cfd628-7ca0-4997-814a-9989f77f4e53","options":{}},"id":"d54afb8f-fa70-470a-bd84-6a5e5d415c45","name":"Get Input from NocoDB1","type":"n8n-nodes-base.webhook","position":[-240,420],"webhookId":"27cfd628-7ca0-4997-814a-9989f77f4e53","typeVersion":2},{"parameters":{"assignments":{"assignments":[{"id":"e729ab88-95f8-44c0-948c-d2476262fd17","name":"primary_topic","type":"string","value":"={{ $json.body.data.rows[0]['Primary Topic'] }}"},{"id":"1c6fbf22-fb3f-4577-b6cc-4d0672ff2046","name":"competitor_urls","type":"string","value":"={{ $json.body.data.rows[0]['Competitor URLs'] }}"},{"id":"ea8518c8-8f89-4aa5-9546-44be77deeebb","name":"target_audience","type":"string","value":"={{ $json.body.data.rows[0]['Target Audience'] }}"},{"id":"4b27d628-6cc1-4161-bb49-d39a4b1d320e","name":"content_type","type":"string","value":"={{ $json.body.data.rows[0]['Content Type'] }}"},{"id":"bb3fefe7-7eea-4a6d-b2de-307b791ff1b6","name":"id","type":"string","value":"={{ $json.body.data.rows[0].Id }}"},{"id":"09e64ce6-39de-4550-9078-fe4f233edd9a","name":"status","type":"string","value":"={{ $json.body.data.rows[0].Status }}"},{"id":"c10736b0-dece-40a7-9fb0-86b23b44e517","name":"location","type":"string","value":"={{ $json.body.data.rows[0].Location }}"},{"id":"6508a1e9-963d-4a79-bd35-f537c892e8d4","name":"language","type":"string","value":"={{ $json.body.data.rows[0].Language }}"}]},"options":{}},"id":"9b3d75f8-c139-4088-bf62-9e2b803a7b30","name":"Set relevant fields1","type":"n8n-nodes-base.set","position":[-60,420],"typeVersion":3.4},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"2b8684dd-3e14-4175-9d66-3713b76fab41","name":"Aggregate SV & CPC1","type":"n8n-nodes-base.aggregate","position":[1040,240],"typeVersion":1},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"89067ebd-05e9-4cb9-99ad-790c6fed8b03","name":"Aggregate KWD1","type":"n8n-nodes-base.aggregate","position":[1040,440],"typeVersion":1},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"id":"28bf7fff-0591-433a-8d10-4f03a31d84b5","name":"Merge SV, CPC & KWD1","type":"n8n-nodes-base.merge","position":[1340,340],"typeVersion":3.1},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"id":"1c2f0b51-c514-4600-ae23-acb9bd2d72e2","name":"Merge Topic Expansion, SV, CPC & KWD1","type":"n8n-nodes-base.merge","position":[1640,420],"typeVersion":3.1},{"parameters":{"mode":"combine","combineBy":"combineByPosition","numberInputs":3,"options":{"includeUnpaired":true}},"id":"c1a59e7d-1196-4e82-a578-72231fff676d","name":"Merge Everything1","type":"n8n-nodes-base.merge","position":[1960,280],"typeVersion":3.1},{"parameters":{"authentication":"nocoDbApiToken","operation":"update","projectId":"pd9k7klafm5lhhs","table":"mhjvw1zlewephpi","fieldsUi":{"fieldValues":[{"fieldName":"Id","fieldValue":"={{ $('Merge Everything1').item.json.id }}"},{"fieldName":"=Status","fieldValue":"Done"}]}},"id":"9832a3bf-4291-4ec9-a153-270802a8475a","name":"Update Status - Done1","type":"n8n-nodes-base.nocoDb","position":[2760,280],"typeVersion":3,"credentials":{"nocoDbApiToken":{"id":"Y5Fx6w3sVmfDCoN4","name":"NocoDB Token account"}}},{"parameters":{"authentication":"nocoDbApiToken","operation":"update","projectId":"pd9k7klafm5lhhs","table":"mhjvw1zlewephpi","fieldsUi":{"fieldValues":[{"fieldName":"Id","fieldValue":"={{ $json.id }}"},{"fieldName":"=Status","fieldValue":"Started"}]}},"id":"6237479c-e8c3-4881-99ae-674402b29e2f","name":"Update Status - Started1","type":"n8n-nodes-base.nocoDb","position":[280,-280],"typeVersion":3,"credentials":{"nocoDbApiToken":{"id":"Y5Fx6w3sVmfDCoN4","name":"NocoDB Token account"}}},{"parameters":{"content":"## Notification and Update Status\n","height":360,"width":480,"color":7},"id":"d485713d-115e-4f0f-b715-75c9da8fc8e8","name":"Sticky Note8","type":"n8n-nodes-base.stickyNote","position":[-20,-460],"typeVersion":1},{"parameters":{"content":"## Topic Expansion to Keywords\n ","height":540,"width":280},"id":"48baa24d-a8e7-4298-8670-9823b96c5238","name":"Sticky Note9","type":"n8n-nodes-base.stickyNote","position":[220,100],"typeVersion":1},{"parameters":{"content":"## Search Volume, Cost Per Click, Keyword Difficulty","height":540,"width":1220,"color":5},"id":"7746e423-c191-48e0-a9a0-ee3b8ed87f74","name":"Sticky Note10","type":"n8n-nodes-base.stickyNote","position":[560,100],"typeVersion":1},{"parameters":{"content":"## Competitor Research\nScrape pages from the top organic results from various generated keywords for AI analysis","height":540,"width":1980,"color":4},"id":"98e013f8-7b00-4bf2-8c1e-961480af5ebd","name":"Sticky Note11","type":"n8n-nodes-base.stickyNote","position":[560,840],"typeVersion":1},{"parameters":{"content":"## Merge and write Final Keyword Strategy","height":540,"width":500,"color":6},"id":"114c1072-1e33-467e-a2a7-69ea1cf9c472","name":"Sticky Note12","type":"n8n-nodes-base.stickyNote","position":[1940,100],"typeVersion":1},{"parameters":{"content":"## Extract and Develop Content","height":540,"width":1800,"color":7},"id":"42cd2045-3227-4665-a53f-c7eb94429c9a","name":"Sticky Note13","type":"n8n-nodes-base.stickyNote","position":[2660,100],"typeVersion":1},{"parameters":{"content":"## Input","height":320,"width":400},"id":"cb06479a-1241-457c-a32b-8c0d170635e9","name":"Sticky Note14","type":"n8n-nodes-base.stickyNote","position":[-300,320],"typeVersion":1},{"parameters":{"model":"google/gemini-2.5-pro-preview","options":{"maxRetries":2}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2200,500],"id":"8fe23892-bafe-4458-9238-4cba9cd097c2","name":"OpenRouter Chat Model4","credentials":{"openRouterApi":{"id":"B8JTIrGoqbbInPF7","name":"OpenRouter account"}}},{"parameters":{"model":"google/gemini-2.5-flash-preview-05-20","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[3580,400],"id":"4084773e-6360-4e91-a4b2-04d31a8cd28f","name":"OpenRouter Chat Model1","credentials":{"openRouterApi":{"id":"B8JTIrGoqbbInPF7","name":"OpenRouter account"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[2980,440],"id":"d73047c7-d3d1-4820-8654-a39b5e2ecdd5","name":"OpenRouter Chat Model2","credentials":{"openRouterApi":{"id":"B8JTIrGoqbbInPF7","name":"OpenRouter account"}}},{"parameters":{"promptType":"define","text":"=<prompt>\n**Task:** Extract the complete JSON array containing detailed outlines for each proposed content piece. This JSON array is embedded within a markdown code block under the \"## 4. Content Outline & Actionable Recommendations\" section of the provided Content Strategy Report.\n\n**Input:**\n<content_strategy_report>\n{{ $json.output }} \n</content_strategy_report>\n\n\n**Required Output Format:**\nYou MUST return ONLY the valid JSON array found within the ` json ...  ` code block located under the \"## 4. Content Outline & Actionable Recommendations\" section.\nEach object within the extracted JSON array should represent a complete content piece outline, containing keys such as \"proposed_seo_title\", \"target_user_intent\", \"key_questions_to_answer\", \"primary_keywords_for_this_piece\", \"recommended_h2_structure_with_clustered_topics\", and \"content_enhancement_suggestions_specific_to_this_piece\".\n\n**Example of the Expected JSON Array Structure to Extract:**\n\n```json\n[\n  {\n    \"proposed_seo_title\": \"Senior Home Care in Winchester, MA: A Complete Guide for Adult Children (Costs, Services & Options)\",\n    \"target_user_intent\": \"Comprehensive understanding of senior home care options, costs, and processes in Winchester for adult children.\",\n    \"key_questions_to_answer\": [\n      \"What is the difference between home health care and home care?\",\n      \"How much does senior home care cost in Winchester?\",\n      \"Does Medicare pay for in-home senior care?\"\n    ],\n    \"primary_keywords_for_this_piece\": [\"senior home care Winchester MA\", \"in-home senior care Winchester MA\", \"cost of senior home care Winchester MA\"],\n    \"recommended_h2_structure_with_clustered_topics\": [\n      {\n        \"h2_heading\": \"Understanding Senior Home Care Needs for Your Winchester Parents\",\n        \"clustered_sub_topics\": [\n          \"Define home care (non-medical, companionship, personal care)\",\n          \"Define home health care (skilled nursing, therapy, medical needs)\",\n          \"Key differences in services, payment, and regulation in MA\"\n        ]\n      }\n      // ... other H2 sections ...\n    ],\n    \"content_enhancement_suggestions_specific_to_this_piece\": [\n      \"Include a downloadable checklist: 'Questions to Ask Home Care Agencies in Winchester'.\",\n      \"Embed a short video testimonial from a Winchester family (if available).\"\n    ]\n  }\n  // ... potentially other content piece objects ...\n]\n```\n\n**Critical Requirements:**\n\n1.  Locate the section titled \"## 4. Content Outline & Actionable Recommendations\" in the input report.\n2. Within this section, find the markdown code block that starts with ` json and ends with  `.\n3.  Extract the entire JSON array content from this specific code block.\n4.  Return only the raw JSON array string. Do NOT include the ```json markdown fences or any other surrounding text or explanations.\n5. If the specified section or the JSON code block within it is not found, or if the content is not a valid JSON array, you should return an empty JSON array string: [].\n6. Preserve all details, formatting, and structure within the extracted JSON array and its objects exactly as they appear in the source report.\n\n**Validation (for your understanding, not for the LLM to output):**\n\n  - The output should begin with `[` and end with `]`.\n  - Each element in the array should be a JSON object `{...}`.\n  - Each object should contain keys like `proposed_seo_title`, `recommended_h2_structure_with_clustered_topics`, etc., as defined in the \"Final Keyword Strategy1\" agent's prompt for Section 4.\n\n</prompt>","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[2980,180],"id":"fd6b1a6f-4f23-427c-9e8d-73d61d589047","name":"Content Title Extractor","executeOnce":false},{"parameters":{"promptType":"define","text":"=<prompt>\n**Primary Goal:**\nGenerate one complete, well-structured, and engaging content piece based on the **Detailed Content Piece Outline** provided below. This content must strictly adhere to our company's \"Brand Voice Guidelines\" and emulate the style of the \"Brand Voice Examples.\"\n\n**Your Role:**\nAct as an expert SEO Content Creator and a skilled brand journalist specializing in senior care content for families in Winchester, MA.\n\n**Core Inputs:**\n\n1.  **Detailed Content Piece Outline (Primary Blueprint for THIS article):**\n    ```json\n    <detailed_content_piece_outline>\n    {{ $json.toJsonString() }} \n    </detailed_content_piece_outline>\n    ```\n    *This JSON object (referenced as `detailed_content_piece_outline` in the instructions below) contains the specific `proposed_seo_title`, `target_user_intent`, `key_questions_to_answer`, `primary_keywords_for_this_piece`, `recommended_h2_structure_with_clustered_topics`, and `content_enhancement_suggestions_specific_to_this_piece` that you MUST use to structure and write THIS article.*\n    *(This is item {{ $json.extracted_piece_index + 1 }} of the selected pieces to generate).* *(Note: Using $json.extracted_piece_index which seems to be in your data. If N8N provides $input.itemIndex in your loop, you can use that too. The total count will be 2 if you've filtered to the top 2.)*\n\n2.  **Overall Content Strategy Report (For Broader Context):**\n    ```markdown\n    <content_strategy_report>\n    {{ $('Final Keyword Strategy1').item.json.output }}\n    </content_strategy_report>\n    ```\n    *Use this report for broader understanding of the target audience, overall SEO keyword strategy (beyond the specifics for this piece), competitive analysis, general content gaps, and overall strategic goals. However, for the specific structure and core content of THIS article, you **MUST prioritize and strictly follow** the `<detailed_content_piece_outline>` provided in Core Input 1.*\n\n3.  **Brand Voice Guidelines:**\n    ```xml\n    <brand_voice_guidelines>\n    **Tone:** Empathetic, warm, reassuring, trustworthy, personal, and optimistic. We speak as caring advisors who have walked in our readers' shoes.\n    \n    **Language:** - Use clear, conversational, and accessible language\n    - Frequently use \"we\" and \"our\" to create a partnership feeling\n    - Avoid clinical or overly corporate jargon in favor of human-centered language\n    - Use person-first language that focuses on the individual, not their condition\n    - Include phrases that acknowledge the emotional journey families are on\n    \n    **Sentence Structure:** - Mix shorter, impactful statements with longer explanatory sentences\n    - Aim for excellent readability (Flesch-Kincaid grade level 8-10)\n    - Use natural, conversational flow that feels like talking to a trusted friend\n    \n    **Perspective:** - Write as knowledgeable and caring advisors who truly understand the family's journey\n    - Position ourselves as partners, not just service providers\n    - Acknowledge the emotional and practical challenges families face\n    \n    **Key Messaging Points to Weave In:**\n    - \"We've been in your shoes\" - acknowledge shared experience\n    - Personalized, individualized care approach\n    - Flexible solutions with no unnecessary minimums or restrictions\n    - Family-centered approach that involves loved ones in decisions\n    - Peace of mind for families\n    - Focus on the person, not just their condition\n    - Quality of life and helping people \"have their best day, every day\"\n    </brand_voice_guidelines>\n    ```\n\n4.  **Brand Voice Examples:**\n    ```xml\n    <brand_voice_examples>\n    <example_1>\n    \"We've been in your shoes and know the importance of personalized and affordable in-home care. We have no weekly minimums and work with you to create a schedule that fits your unique needs and budget – whether it's once a week or 24/7 home care in the Boston Northwest area.\"\n    </example_1>\n    \n    <example_2>\n    \"We know your first priority when choosing a home care agency in the Boston area is finding someone who will care for your loved one as you would… someone you can always trust and rely on. We've been in your shoes, and know what it takes to deliver the very best quality of personalized, yet affordable, in-home care.\"\n    </example_2>\n    \n    <example_3>\n    \"Our goal is to enhance the quality of life for you and your loved one. We're not content to simply help people get through the day. We want them to live life to the fullest and have the best day possible, filled with exceptional care, joy and accomplishment. Today and every day.\"\n    </example_3>\n    </brand_voice_examples>\n    ```\n\n**Your Task:**\n\n<content_creation_requirements>\nCreate ONE complete content piece specifically optimized for the `proposed_seo_title` found in the `<detailed_content_piece_outline>` (Core Input 1).\n\n**Content Structure:**\n- Use the **`proposed_seo_title`** (from `<detailed_content_piece_outline>`) as your H1 heading.\n- **You MUST meticulously follow the `recommended_h2_structure_with_clustered_topics` array provided in the `<detailed_content_piece_outline>`. For each object in this array, use its `h2_heading` key as the H2 heading text for a section, and then thoroughly develop content for all strings listed in its `clustered_sub_topics` array under that H2.**\n- Ensure the content directly and comprehensively answers all questions listed in the **`key_questions_to_answer`** array (from `<detailed_content_piece_outline>`).\n- The content must fully satisfy the intent described in **`target_user_intent`** (from `<detailed_content_piece_outline>`).\n\n**Content Requirements:**\n- **Length:** 1500-3000+ words, or the length necessary to thoroughly cover all specified H2s and their `clustered_sub_topics` from the `<detailed_content_piece_outline>`.\n- **Keywords:**\n    - Prioritize natural integration of the keywords listed in the **`primary_keywords_for_this_piece`** array (from `<detailed_content_piece_outline>`).\n    - Weave in the specific phrases and topics from the **`clustered_sub_topics`** arrays (within `recommended_h2_structure_with_clustered_topics` of the `<detailed_content_piece_outline>`) as these are critical for addressing user intent and represent important long-tail queries.\n    - You may supplement with relevant secondary and long-tail keywords from the overall `<content_strategy_report>` (Core Input 2) if they are contextually appropriate and directly support the detailed outline provided in Core Input 1, but do not deviate from the Core Input 1 outline.\n- **Questions:** Directly and thoroughly address all questions listed in the **`key_questions_to_answer`** array (from `<detailed_content_piece_outline>`).\n- **Actionable Content:** Implement all suggestions from the **`content_enhancement_suggestions_specific_to_this_piece`** array (from `<detailed_content_piece_outline>`). You can also incorporate relevant practical recommendations from the broader `<content_strategy_report>` if they clearly align with the topic of this specific piece and the provided outline.\n- **Local Focus:** Maintain focus on Winchester, MA and surrounding Boston Northwest area, as guided by all input documents.\n\n**Brand Voice Application:**\n- Embody the empathetic, partnership-focused tone throughout.\n- Use \"we've been in your shoes\" messaging appropriately.\n- Balance emotional support with practical guidance.\n- Include reassuring language that validates family concerns.\n- End with supportive (not pushy) calls to action relevant to the topic of this article.\n\n**Quality Standards:**\n- Ensure content can stand alone as a complete, valuable resource for someone searching for the `proposed_seo_title`.\n- Provide original insights beyond generic advice, drawing deeply from the specifics in the `<detailed_content_piece_outline>`.\n- Maintain factual accuracy based on the provided input documents.\n- Create natural flow from introduction through conclusion, ensuring all H2 sections and their `clustered_sub_topics` from the `<detailed_content_piece_outline>` are covered comprehensively.\n- Address the emotional journey families are experiencing.\n</content_creation_requirements>\n<output_format>\n**Output Requirements:**\n\n\nReturn the complete content piece using this structure:\n\n```markdown\n# {{ $json.proposed_seo_title }}\n\n[Complete content following ALL requirements above, meticulously adhering to the `recommended_h2_structure_with_clustered_topics` and other details from the `<detailed_content_piece_outline>` (Core Input 1)]\n\n## Call to Action\n[Supportive, non-pushy call to action section, tailored to the content of this specific article, informed by its `target_user_intent` and overall goals]\n```\n**Critical Instructions:**\n\n  - Use Markdown formatting throughout.\n  - Start with the `proposed_seo_title` (from `<detailed_content_piece_outline>`) as H1.\n  - For H2s, strictly use the `h2_heading` values from the `recommended_h2_structure_with_clustered_topics` array in the `<detailed_content_piece_outline>`. Use \\#\\#\\# for any necessary sub-points within those.\n  - No additional commentary or meta-text outside the Markdown content.\n  - Return only the finished content piece ready for publication.\n  - Focus exclusively on generating the content for the single detailed outline provided in `<detailed_content_piece_outline>` (Core Input 1) for this run.\n\n\n</output_format>\n</prompt>","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2,"position":[3560,180],"id":"7103e58a-2fba-4668-8ae2-1315db17e7a1","name":"SEO Content Generator"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Format Output Node (f2038849-8b7c-476c-8f74-d3265de99d2e)\n// MODE: \"Run Once for Each Item\"\n// This script runs for EACH item output by the SEO Content Generator loop.\n// ASSUMPTION: The input to this node (referenced as $json) CONTAINS BOTH:\n// 1. The original fields from the looped item (e.g., proposed_seo_title, extracted_piece_index).\n// 2. The Markdown output from the SEO Content Generator agent.\n\n// Field name from the SEO Content Generator that holds the generated Markdown string.\n// COMMON NAMES: 'output', 'text', 'content'. \n// CHECK YOUR AGENT'S ACTUAL OUTPUT (if \"Pass Through Input Data\" is enabled on the agent)\n// AND ADJUST THIS FIELD NAME if the agent's output is in a different key.\nconst agentMarkdownOutputField = 'output'; // <<<### CHECK AND ADJUST THIS FIELD NAME ###\n\nconst generated_content = $json[agentMarkdownOutputField];\nconst actual_title = $json.proposed_seo_title; // From the input data passed through\nconst piece_index_from_input = $json.extracted_piece_index; // 0-based index from earlier step\n\nif (typeof generated_content === 'undefined') {\n  const errorMessage = \"Error: Generated content (e.g., $json.\" + agentMarkdownOutputField + \") is undefined in Format Output node. Check agent output field name and ensure the 'Pass Through Input Data' (or similar) option is enabled on the preceding agent node.\";\n  console.error(errorMessage, \"Input received:\", $json);\n  // Return a SINGLE error object\n  return { json: { error: errorMessage, input_received: $json } }; \n}\n\nif (typeof actual_title === 'undefined') {\n  const errorMessage = \"Error: actual_title (from $json.proposed_seo_title) is undefined in Format Output node. Ensure the 'Pass Through Input Data' (or similar) option is enabled on the preceding agent node.\";\n  console.error(errorMessage, \"Input received:\", $json);\n  // Return a SINGLE error object\n  return { json: { error: errorMessage, input_received: $json } };\n}\n\n// Use 'extracted_piece_index' (0-based) and add 1 to make it 1-based for field names for aggregation.\nlet item_loop_index_1_based = 1; // Default\nif (piece_index_from_input !== undefined) {\n  item_loop_index_1_based = piece_index_from_input + 1;\n} else if ($input.itemIndex !== undefined) { // N8N's own loop index (0-based) for the current item\n  item_loop_index_1_based = $input.itemIndex + 1;\n}\n\nconst filename_base = actual_title\n  .toLowerCase()\n  .replace(/[^a-z0-9\\s]/g, '') \n  .replace(/\\s+/g, '-')      \n  .substring(0, 50);         \n\nconst filename = `${String(item_loop_index_1_based).padStart(2, '0')}-${filename_base}.md`;\n\nconst outputItem = {\n  json: {\n    filename: filename,\n    content: generated_content,        // The generated Markdown article\n    title: actual_title,               // THE ACTUAL TITLE OF THIS ARTICLE\n    item_index_for_aggregation: item_loop_index_1_based, \n    content_field_for_aggregation: `content${item_loop_index_1_based}`, \n    title_field_for_aggregation: `title${item_loop_index_1_based}`,     \n    word_count: generated_content ? generated_content.split(/\\s+/).length : 0,\n    created_at_piece: new Date().toISOString()\n    // If 'rationale_for_selection' was passed through from the prioritization step:\n    // rationale_for_selection: $json.rationale_for_selection \n  }\n};\n\n// Return a SINGLE object for \"Run Once for Each Item\" mode\nreturn outputItem;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3880,520],"id":"534766d3-f1c2-4170-a41d-0ae4800ed347","name":"Format Output"},{"parameters":{"authentication":"nocoDbApiToken","operation":"create","projectId":"pd9k7klafm5lhhs","table":"mwxmq3b0mjs75ob","fieldsUi":{"fieldValues":[{"fieldName":"primary_topic_used","fieldValue":"={{ $json.primary_topic_used }}"},{"fieldName":"content1","fieldValue":"={{ $json.content1 }}"},{"fieldName":"content2","fieldValue":"={{ $json.content2 }}"},{"fieldName":"content3","fieldValue":"={{ $json.content3 }}"},{"fieldName":"content4","fieldValue":"={{ $json.content4 }}"},{"fieldName":"report_content","fieldValue":"={{ $json.report_content }}"},{"fieldName":"generatedAt","fieldValue":"={{$now}}"},{"fieldName":"target_audience","fieldValue":"={{ $json.target_audience }}"},{"fieldName":"content_type","fieldValue":"={{ $json.content_type }}"},{"fieldName":"location","fieldValue":"={{ $json.location }}"}]}},"id":"0516c74a-067c-4234-9980-506aca102ebb","name":"Write Content Brief ","type":"n8n-nodes-base.nocoDb","position":[4220,180],"typeVersion":3,"credentials":{"nocoDbApiToken":{"id":"Y5Fx6w3sVmfDCoN4","name":"NocoDB Token account"}}},{"parameters":{"jsCode":"const allItems = $input.all(); // Each item is an output from the SEO Content Generator\nconst strategyReport = $('Final Keyword Strategy1').first().json.output;\nconst primaryTopic = $(\"Merge Everything1\").first().json.primary_topic;\n\n// Get the input data from the \"Set relevant fields1\" node\nconst inputData = $('Set relevant fields1').first().json;\n\nconst contentData = {\n  primary_topic_used: primaryTopic || \"Generated Content\",\n  report_content: strategyReport,\n  created_at: new Date().toISOString(),\n  total_pieces: allItems.length,\n  // Add the input fields from the Set node\n  target_audience: inputData.target_audience,\n  content_type: inputData.content_type,\n  location: inputData.location,\n  language: inputData.language,\n  id: inputData.id,\n  status: inputData.status,\n  competitor_urls: inputData.competitor_urls\n};\n\n// Use array index instead of item.json.index\nallItems.forEach((item, arrayIndex) => {\n  const index = arrayIndex + 1; // Convert to 1-based indexing\n\n  // Ensure item.json exists and has the 'output' field (the generated markdown)\n  if (item.json && item.json.output) {\n    contentData[`content${index}`] = item.json.output;\n  } else {\n    contentData[`content${index}`] = \"Content not found or item.json.output is missing\";\n    console.warn(`Warning: Missing content for item at arrayIndex ${arrayIndex}. Item data:`, JSON.stringify(item));\n  }\n\n  // Since you \"don't really care about the title\" for the aggregated output fields like title1, title2,\n  // we will remove the lines that tried to create contentData[`title${index}`].\n  //\n  // If you *did* want to include the title (e.g., from \"proposed_seo_title\") IF IT EXISTS,\n  // you could add something like this:\n  // if (item.json && item.json.proposed_seo_title) {\n  //   contentData[`title${index}`] = item.json.proposed_seo_title;\n  // } else {\n  //   contentData[`title${index}`] = \"Title not specified\";\n  // }\n});\n\nconsole.log(`Aggregated ${allItems.length} content pieces with strategy report`);\nconsole.log('Fields populated in contentData:', Object.keys(contentData));\n// For more detailed debugging, you could log a snippet of contentData:\n// console.log('Sample of contentData:', JSON.stringify(contentData, null, 2).substring(0, 500) + \"...\");\n\n\nreturn {\n  json: contentData\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[4060,180],"id":"260637de-0adb-46e8-83e9-800de9f93a11","name":"Aggregation Node"},{"parameters":{"jsCode":"// Get the string output from the Content Title Extractor agent\nlet rawJsonString = $input.first().json.output;\n\nif (typeof rawJsonString !== 'string') {\n  console.error(\"Input is not a string. Received:\", rawJsonString);\n  return [{ json: { error: \"Input from Content Title Extractor was not a string.\", data_received: rawJsonString } }];\n}\n\n// Remove markdown code fences if present\n// Regex to match optional ```json prefix (and similar variations) and required ``` suffix\nconst fenceRegex = /^```(?:json)?\\s*([\\s\\S]*?)\\s*```$/;\nconst match = rawJsonString.match(fenceRegex);\n\nif (match && match[1]) {\n  // If fences are found, use the content within them\n  rawJsonString = match[1].trim();\n} else {\n  // If no fences, assume it might be clean JSON already, or just a plain string. Trim it.\n  rawJsonString = rawJsonString.trim();\n}\n\nlet contentPieceObjects;\ntry {\n  // Attempt to parse the cleaned string into a JavaScript array\n  contentPieceObjects = JSON.parse(rawJsonString);\n} catch (e) {\n  console.error(\"Failed to parse JSON string. Error:\", e.message, \"Raw string after cleaning:\", rawJsonString);\n  return [{ json: { error: \"Failed to parse JSON from Content Title Extractor output.\", error_message: e.message, cleaned_string: rawJsonString } }];\n}\n\n// Ensure it's an array\nif (!Array.isArray(contentPieceObjects)) {\n  console.error(\"Parsed data is not an array. Parsed data:\", contentPieceObjects);\n  return [{ json: { error: \"Parsed data from Content Title Extractor is not an array.\", parsed_data: contentPieceObjects } }];\n}\n\nif (contentPieceObjects.length === 0) {\n  // Handle case where an empty array was correctly extracted (e.g., no outlines found by the previous agent)\n  // You might want to stop the workflow here or handle it differently depending on your needs.\n  // For now, just return an empty array of items.\n  console.log(\"No content piece objects found after parsing. Workflow may stop for this branch.\");\n  return []; \n}\n\n// Convert each content piece object into a separate N8N item.\n// Each object already contains 'proposed_seo_title', 'recommended_h2_structure_with_clustered_topics', etc.\nreturn contentPieceObjects.map((piece, index) => ({\n  json: {\n    // Spread all properties from the parsed piece object\n    ...piece,\n    // Add an index if you need to track order or for looping context later\n    // This index is relative to the array of extracted pieces\n    extracted_piece_index: index \n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[3340,180],"id":"4cf9260e-0fac-4809-872b-02d8565f3cad","name":"Title Extractor Code"},{"parameters":{"resource":"on_page","operation":"parse-page-content","url":"={{ $json.urlToParse }}","enable_javascript":true,"additionalFieldsParsePage":{}},"type":"n8n-nodes-dataforseo.dataForSeo","typeVersion":1,"position":[1120,980],"id":"06071f10-c9b5-4eb3-91ef-2a3b00705098","name":"DataForSeo1","credentials":{"dataForSeoApi":{"id":"t2AvCYTx56jzJo20","name":"DataForSEO account"}}},{"parameters":{"resource":"serp","keyword":"={{ $json['output.primary_keywords'] }}","location_name":"={{ $('Set relevant fields1').item.json.location }}","language_name":"English"},"type":"n8n-nodes-dataforseo.dataForSeo","typeVersion":1,"position":[600,980],"id":"594b6e20-544d-46a6-a09f-2ff529b2c778","name":"Get Parsed SERP","credentials":{"dataForSeoApi":{"id":"t2AvCYTx56jzJo20","name":"DataForSEO account"}}},{"parameters":{"jsCode":"// n8n Code Node - Data Extraction from SERP API\n// Set to \"Run Once for All Items\"\n\nconst TOP_N_ORGANIC = 8; // You set this to 8\nconst outputForAllKeywords = [];\n\nfor (const n8nItem of $input.all()) {\n  const fullApiResponse = n8nItem.json;\n\n  // Initialize with the new structure for organicUrls\n  const extractedData = {\n    keyword: \"KEYWORD_NOT_FOUND\",\n    organicUrls: [], // Now an array of objects: { url, rank_group, rank_absolute }\n    featuredSnippetUrl: null\n    // paaQuestions: [], // Commented out\n    // paaSourceUrls: [], // Commented out\n    // aiOverviewText: null, // Commented out\n    // aiOverviewCitationUrls: [] // Commented out\n  };\n\n  if (!fullApiResponse || !fullApiResponse.tasks || !Array.isArray(fullApiResponse.tasks) || fullApiResponse.tasks.length === 0) {\n    console.warn(\"API response structure is not as expected or tasks array is empty. Full response:\", JSON.stringify(fullApiResponse, null, 2));\n    outputForAllKeywords.push({ json: extractedData });\n    continue;\n  }\n\n  const task = fullApiResponse.tasks[0];\n\n  if (!task || task.status_code !== 20000) {\n    console.warn(\"Task not found or task status is not OK. Task data:\", JSON.stringify(task, null, 2));\n    if (task && task.data && task.data.keyword) {\n        extractedData.keyword = task.data.keyword;\n    }\n    outputForAllKeywords.push({ json: extractedData });\n    continue;\n  }\n\n  if (task.data && task.data.keyword) {\n    extractedData.keyword = task.data.keyword;\n  } else {\n    console.warn(\"`task.data.keyword` was not found. Task data:\", JSON.stringify(task.data, null, 2));\n  }\n  \n  if (task.result && Array.isArray(task.result) && task.result.length > 0 && task.result[0].items && Array.isArray(task.result[0].items)) {\n    const serpItems = task.result[0].items;\n    let organicCounter = 0;\n\n    for (const resultItem of serpItems) {\n      const itemType = resultItem.type;\n\n      if (itemType === \"organic\" && organicCounter < TOP_N_ORGANIC) {\n        if (resultItem.url) {\n          extractedData.organicUrls.push({\n            url: resultItem.url,\n            rank_group: resultItem.rank_group,\n            rank_absolute: resultItem.rank_absolute\n          });\n          organicCounter++;\n        }\n      } else if (itemType === \"featured_snippet\") {\n        if (resultItem.url && !extractedData.featuredSnippetUrl) {\n          // For featured snippets, you might also want to capture rank_group and rank_absolute\n          // but the primary output for it here is just the URL.\n          // If you need more details from FS, you can expand this part.\n          extractedData.featuredSnippetUrl = resultItem.url; \n        }\n      } \n      /*\n      else if (itemType === \"people_also_ask\") {\n        // PAA Logic Commented Out\n        // if (resultItem.items && Array.isArray(resultItem.items)) {\n        //   for (const paaItem of resultItem.items) {\n        //     if (paaItem.title) { \n        //       extractedData.paaQuestions.push(paaItem.title);\n        //     } else if (paaItem.question) { \n        //       extractedData.paaQuestions.push(paaItem.question);\n        //     }\n        //     if (paaItem.expanded_element && Array.isArray(paaItem.expanded_element)) {\n        //       // ... PAA source URL logic ...\n        //     } // ... other PAA URL conditions ...\n        //   }\n        // }\n      } else if (itemType === \"ai_overview\") {\n        // AI Overview Logic Commented Out\n        // if (resultItem.text) { \n        //     extractedData.aiOverviewText = resultItem.text;\n        // } else if (resultItem.answer) { \n        //      extractedData.aiOverviewText = resultItem.answer;\n        // }\n        // if (resultItem.links && Array.isArray(resultItem.links)) {\n        //   // ... AI citation URL logic ...\n        // } // ... other AI citation conditions ...\n      }\n      */\n    }\n  } else {\n    console.warn(`'task.result[0].items' was not found or not an array for keyword '${extractedData.keyword}'. Task result:`, JSON.stringify(task.result, null, 2));\n  }\n\n  /*\n  // Deduplication Commented Out\n  extractedData.paaQuestions = [...new Set(extractedData.paaQuestions)];\n  extractedData.paaSourceUrls = [...new Set(extractedData.paaSourceUrls)];\n  extractedData.aiOverviewCitationUrls = [...new Set(extractedData.aiOverviewCitationUrls)];\n  */\n\n  outputForAllKeywords.push({ json: extractedData });\n}\n\nreturn outputForAllKeywords;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[780,980],"id":"9e60c9de-2708-4680-93e0-d823d31f9a92","name":"Extract Relevant Data from SERP","alwaysOutputData":true},{"parameters":{"jsCode":"// n8n Code Node - URL Fan-Out & OnPage API Prep\n// --- ASSUMING NODE IS SET TO \"RUN ONCE FOR ALL ITEMS\" ---\n\nconst allInputItems = $input.all(); // Gets ALL incoming n8n items as an array\nconst finalOutputItems = [];      // This will collect all processed URLs\n\nconst onPageApiParams = {\n  enable_javascript: true,\n  enable_resources: false,\n  enable_browser_rendering: false,\n};\n\n// Loop through each item that was passed to this Code node\nfor (const item of allInputItems) {\n  const keywordData = item.json; // Get the .json payload of the current item\n\n  const originalKeyword = keywordData.keyword || \"UNKNOWN_KEYWORD\";\n\n  // 1. Process Organic URLs\n  if (keywordData.organicUrls && Array.isArray(keywordData.organicUrls)) {\n    for (const organicEntry of keywordData.organicUrls) {\n      if (organicEntry && organicEntry.url) {\n        finalOutputItems.push({\n          json: {\n            originalKeyword: originalKeyword,\n            urlToParse: organicEntry.url,\n            rank_group: organicEntry.rank_group,\n            rank_absolute: organicEntry.rank_absolute,\n            typeOfUrl: \"organic\",\n            onPageApiTaskPayload: {\n              url: organicEntry.url,\n              ...onPageApiParams\n            }\n          }\n        });\n      }\n    }\n  }\n\n  // 2. Process Featured Snippet URL\n  if (keywordData.featuredSnippetUrl) {\n    finalOutputItems.push({\n      json: {\n        originalKeyword: originalKeyword,\n        urlToParse: keywordData.featuredSnippetUrl,\n        // You could add rank_group/rank_absolute here if you extracted them for FS too\n        typeOfUrl: \"featured_snippet\",\n        onPageApiTaskPayload: {\n          url: keywordData.featuredSnippetUrl,\n          ...onPageApiParams\n        }\n      }\n    });\n  }\n\n  // Sections for PAA and AI Overview URLs (if re-enabled) would go here,\n  // inside the loop, operating on the current 'keywordData'.\n}\n\nreturn finalOutputItems; // Return all the collected items"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[960,980],"id":"3a33c437-3445-4328-9202-7203b8156835","name":"Restructure Data for Scraping"},{"parameters":{"promptType":"define","text":"=Analyze the following competitor content for the Primary Topic \"{{ $json.originalKeyword }}\":\n\nCompetitor URL: {{ $json.urlToParse }}\nKeyword Ranking DATA: \n```\nrank_group: {{ $json.rank_group }}\nrank_absolute: {{ $json.rank_absolute }}\n```\nParsed Page Content DATA:\n```\n{{ $json.parsedPageContentForLLM }}\n```\nThese are all derived from Organic Search results.\n\n**As you conduct your analysis, please adopt the perspective of a senior home care business that primarily serves clients using private pay and insurance and does not accept Medicare/Medicaid.**\n\nPlease identify and analyze:\n1.  **Keyword Analysis (based on Keyword Ranking DATA):**\n    * Primary keywords they appear to be targeting.\n2.  **Content Structure & Depth Analysis (based on Parsed Page Content DATA):**\n    * Actual word count.\n    * Heading structure (e.g., H1, H2s, H3s and their themes).\n    * Estimated content depth and comprehensiveness.\n    * Key elements used (e.g., lists, images, videos - if available in parsed data).\n3.  **Integrated Analysis (using both data sources):**\n    * Content gaps or missing topics considering both their rankings and actual content.\n    * Unique angles or approaches evident in their content.\n    * Questions they're answering (or not answering) effectively.\n    * Alignment between their ranking keywords and their on-page content focus.\n    * Strengths and weaknesses of their content.\n\nFormat the output as a structured analysis.","options":{}},"id":"58f90cc2-c2b0-4b1d-a891-5f821f7ca2b3","name":"Competitor Analysis","type":"@n8n/n8n-nodes-langchain.agent","position":[1800,980],"typeVersion":1.8},{"parameters":{"model":"google/gemini-2.5-flash-preview","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenRouter","typeVersion":1,"position":[1820,1240],"id":"fe90e065-2730-4051-bfca-c324dec61e86","name":"OpenRouter Chat Model5","credentials":{"openRouterApi":{"id":"B8JTIrGoqbbInPF7","name":"OpenRouter account"}}},{"parameters":{"jsCode":"// --- Start of n8n Code Node Script ---\n\nconst n8nInputItems = $input.all(); // Gets all incoming n8n items\nconst aggregatedData = {}; // Object to store unique data by URL\nlet allAttempts = []; // Array to hold all \"attempt\" objects from the input\n\n// --- Step 1: Determine Input Structure and Populate 'allAttempts' ---\n// console.log(\"Received n8nInputItems count:\", n8nInputItems.length);\nif (n8nInputItems.length === 0) {\n  console.log(\"No input items received by the Code node. Exiting.\");\n  return [];\n}\n\n// Common Scenario 1: A single n8n item whose '.json' property is the array of all your \"attempts\".\n// (e.g., HTTP Request node outputting a JSON array, passed directly)\nif (n8nInputItems.length === 1 && Array.isArray(n8nInputItems[0].json) && n8nInputItems[0].json.every(attempt => attempt && typeof attempt.tasks !== 'undefined')) {\n  // console.log(\"Input Strategy: Detected a single n8n item where '.json' is the array of attempts.\");\n  allAttempts = n8nInputItems[0].json;\n}\n// Common Scenario 2: Multiple n8n items, where each item's '.json' property is a single \"attempt\" object.\n// (e.g., a SplitInBatches node or previous node outputting multiple items)\nelse if (n8nInputItems.every(item => item.json && typeof item.json.tasks !== 'undefined' && !Array.isArray(item.json))) {\n  // console.log(\"Input Strategy: Detected multiple n8n items, where each '.json' is a single attempt object.\");\n  allAttempts = n8nInputItems.map(item => item.json);\n}\n// Fallback/Alternative: If the input items *are* the \"attempt\" objects directly (less common for a Code node expecting JSON input this way)\nelse if (n8nInputItems.every(item => typeof item === 'object' && item.tasks && Array.isArray(item.tasks))) {\n  // console.log(\"Input Strategy: Detected multiple n8n items, where each item IS an attempt object (no '.json' wrapper).\");\n  allAttempts = n8nInputItems;\n}\nelse {\n  console.error(\"ERROR: Could not reliably determine the input structure for 'allAttempts'. Please check the data being passed to this Code node.\");\n  // console.log(\"Details of n8nInputItems[0]:\", JSON.stringify(n8nInputItems[0], null, 2));\n  return []; // Stop if input structure is unclear\n}\n\n// console.log(`Initial 'allAttempts' count: ${allAttempts.length}`);\nif (!Array.isArray(allAttempts) || allAttempts.length === 0) {\n  console.log(\"'allAttempts' is not a populated array. Current value:\", JSON.stringify(allAttempts, null, 2));\n  return [];\n}\n\n// --- Step 2: Process Each \"Attempt\" ---\nfor (const attemptEntry of allAttempts) {\n  // console.log(\"Processing attemptEntry:\", JSON.stringify(attemptEntry, null, 2).substring(0, 300) + \"...\"); // Log first part of attempt\n\n  if (!attemptEntry || !Array.isArray(attemptEntry.tasks)) {\n    // console.log(\"Skipping an attemptEntry because 'tasks' is missing or not an array.\");\n    continue;\n  }\n\n  for (const task of attemptEntry.tasks) {\n    // console.log(\"Processing task:\", JSON.stringify(task, null, 2).substring(0, 300) + \"...\"); // Log first part of task\n\n    if (!task || !task.data) {\n      // console.log(\"Skipping task: 'task' or 'task.data' is missing.\");\n      continue;\n    }\n    const url = task.data.url;\n    // console.log(\"Extracted URL:\", url);\n\n    if (url && !aggregatedData[url]) { // Process if URL is valid and not already aggregated\n      // console.log(`URL '${url}' is new. Attempting to extract content.`);\n\n      if (task.result && Array.isArray(task.result) && task.result.length > 0 &&\n          task.result[0].items && Array.isArray(task.result[0].items) && task.result[0].items.length > 0) {\n\n        const firstItemFromResult = task.result[0].items[0];\n\n        if (!firstItemFromResult || !firstItemFromResult.page_content) {\n          // console.log(`Skipping content extraction for URL '${url}': 'firstItemFromResult' or '.page_content' is missing.`);\n          continue;\n        }\n        const pageContent = firstItemFromResult.page_content;\n        // console.log(\"Found pageContent for URL:\", url);\n\n        aggregatedData[url] = {\n          url: url,\n          retrieved_at: firstItemFromResult.fetch_time || null,\n          contacts: pageContent.contacts || null,\n          header_primary_content: null,\n          header_secondary_content: null,\n          main_topic: null,\n          secondary_topic: null\n        };\n\n        if (pageContent.header) {\n          aggregatedData[url].header_primary_content = pageContent.header.primary_content || null;\n          aggregatedData[url].header_secondary_content = pageContent.header.secondary_content || null;\n        }\n\n        if (pageContent.main_topic && Array.isArray(pageContent.main_topic)) {\n          aggregatedData[url].main_topic = pageContent.main_topic.map(topic => ({\n            h_title: topic.h_title || null,\n            main_title: topic.main_title || null,\n            author: topic.author || null,\n            language: topic.language || null,\n            level: topic.level || null,\n            primary_content: topic.primary_content || null,\n            secondary_content: topic.secondary_content || null,\n            table_content: topic.table_content || null\n          }));\n        }\n\n        if (pageContent.secondary_topic && Array.isArray(pageContent.secondary_topic)) {\n          aggregatedData[url].secondary_topic = pageContent.secondary_topic.map(topic => ({\n            h_title: topic.h_title || null,\n            main_title: topic.main_title || null,\n            author: topic.author || null,\n            language: topic.language || null,\n            level: topic.level || null,\n            primary_content: topic.primary_content || null,\n            secondary_content: topic.secondary_content || null,\n            table_content: topic.table_content || null\n          }));\n        }\n        // console.log(`Successfully aggregated data for URL: ${url}`);\n\n      } else {\n        // console.log(`Could not extract content for URL '${url}': 'task.result' structure is not as expected or empty.`);\n      }\n    } else if (url && aggregatedData[url]) {\n      // console.log(`URL '${url}' already processed. Skipping duplicate.`);\n    } else if (!url) {\n      // console.log(\"Skipping task because URL is missing in task.data.\");\n    }\n  }\n}\n\n// --- Step 3: Prepare and Return Output ---\nconst outputItems = Object.values(aggregatedData);\n// console.log(\"Final aggregatedData object:\", JSON.stringify(aggregatedData, null, 2));\n// console.log(\"Count of unique URLs processed:\", outputItems.length);\n\nif (outputItems.length === 0) {\n  console.log(\"No data was aggregated into outputItems. Check previous logs for reasons (e.g., input structure, missing fields, all URLs were duplicates of an unprocessed one).\");\n}\n\nreturn outputItems.map(item => ({ json: item }));\n\n// --- End of n8n Code Node Script ---"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1340,1120],"id":"9dc52d12-68ec-4968-9062-59c1648a5951","name":"Content Aggregation","alwaysOutputData":true},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"urlToParse","field2":"url"}]},"options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.1,"position":[1460,980],"id":"905b4eb3-257a-4739-877d-f9705f886deb","name":"Merge"},{"parameters":{"aggregate":"aggregateAllItemData","options":{}},"id":"c302eb02-d36b-4d23-8caf-ee19282c2192","name":"Aggregate Competitor Analysis","type":"n8n-nodes-base.aggregate","position":[2120,980],"typeVersion":1},{"parameters":{"jsCode":"// n8n Code Node (JavaScript)\n// EXECUTION MODE: \"Run Once for All Items\" (Default)\n// INPUT: $input.all() is an array of n8n items.\n//        Each n8nItem.json is an object like one of the elements in your provided `output.json`\n//        (containing originalKeyword, urlToParse, header_primary_content, main_topic, etc.).\n\nconst allInputN8NItems = $input.all();\nconst outputItems = []; // Array to hold the processed items\n\nif (allInputN8NItems.length === 0) {\n  // If there are no items, you might want to return an empty array or an error item\n  // For now, returning an empty array, which will stop further execution for this branch.\n  return []; \n}\n\n// Loop through each input n8n item\nfor (const n8nItem of allInputN8NItems) {\n  const currentItemJson = n8nItem.json;\n  let formattedText = \"\";\n  const processedParagraphs = new Set(); // De-duplicate paragraphs FOR THIS ITEM ONLY\n\n  // Metadata from the current item\n  const originalKeyword = currentItemJson.originalKeyword || \"Keyword not specified\";\n  const url = currentItemJson.url || currentItemJson.urlToParse || \"URL not found\";\n  const rank_group = currentItemJson.rank_group !== undefined ? currentItemJson.rank_group : \"N/A\";\n  const rank_absolute = currentItemJson.rank_absolute !== undefined ? currentItemJson.rank_absolute : \"N/A\";\n  const typeOfUrl = currentItemJson.typeOfUrl || \"N/A\";\n  const urlToParse = currentItemJson.urlToParse || url; // Fallback for urlToParse\n\n  try {\n    // 1. Process Header's Primary Content\n    if (currentItemJson.header_primary_content && Array.isArray(currentItemJson.header_primary_content)) {\n      currentItemJson.header_primary_content.forEach(contentItem => {\n        if (contentItem.text && typeof contentItem.text === 'string') {\n          const trimmedText = contentItem.text.trim();\n          if (trimmedText && !processedParagraphs.has(trimmedText)) {\n            formattedText += trimmedText + \"\\n\\n\";\n            processedParagraphs.add(trimmedText);\n          }\n        }\n      });\n    }\n\n    // 2. Process Main Topics\n    if (currentItemJson.main_topic && Array.isArray(currentItemJson.main_topic)) {\n      currentItemJson.main_topic.forEach(topic => {\n        if (topic.h_title && typeof topic.h_title === 'string') {\n          const level = (typeof topic.level === 'number' && topic.level > 0 && topic.level < 7) ? topic.level : 2;\n          const headingLine = `H${level}: ${topic.h_title.trim()}`;\n          // Add heading (no need to check printedGlobalHeadings as this is per item)\n          formattedText += headingLine + \"\\n\";\n        }\n\n        if (topic.primary_content && Array.isArray(topic.primary_content)) {\n          topic.primary_content.forEach(pContent => {\n            if (pContent.text && typeof pContent.text === 'string') {\n              const trimmedText = pContent.text.trim();\n              if (trimmedText && !processedParagraphs.has(trimmedText)) {\n                formattedText += trimmedText + \"\\n\";\n                processedParagraphs.add(trimmedText);\n              }\n            }\n          });\n        }\n\n        if (topic.secondary_content && Array.isArray(topic.secondary_content) && topic.secondary_content.length > 0) {\n          topic.secondary_content.forEach(sContent => {\n            if (sContent.text && typeof sContent.text === 'string') {\n              const trimmedText = sContent.text.trim();\n              if (trimmedText && !processedParagraphs.has(trimmedText)) {\n                const isListItem = !sContent.url && (!sContent.urls || sContent.urls.length === 0);\n                formattedText += (isListItem ? \"- \" : \"\") + trimmedText + \"\\n\";\n                processedParagraphs.add(trimmedText);\n              }\n            }\n          });\n        }\n        formattedText += \"\\n\"; // Blank line after each topic's content\n      });\n    }\n  } catch (error) {\n    console.error(`Error processing content for URL ${url}: ${error.message}`);\n    // Add error info to this specific item's output\n    currentItemJson.errorProcessingContent = error.message;\n    currentItemJson.parsedPageContentForLLM = \"Error during content processing. Please check logs.\";\n    // We will still push this item so the flow doesn't necessarily break for other items\n  }\n\n  // Add the new formatted content string to the current item's JSON\n  // and any other fields you want to ensure are in the output.\n  const outputJson = {\n    originalKeyword: originalKeyword,\n    url: url,\n    urlToParse: urlToParse, // Keeping it as per your input structure\n    rank_group: rank_group,\n    rank_absolute: rank_absolute,\n    typeOfUrl: typeOfUrl,\n    parsedPageContentForLLM: formattedText.trim()\n    // Removed word count and task ID as per your last request\n  };\n  \n  // If there was an error, it would have been added to currentItemJson already\n  if(currentItemJson.errorProcessingContent) {\n    outputJson.errorProcessingContent = currentItemJson.errorProcessingContent;\n  }\n\n  outputItems.push({ json: outputJson });\n}\n\nreturn outputItems; // Return the array of all processed items"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1620,980],"id":"26e26e44-21c9-4075-8ca9-cbd67cd59fcc","name":"Data Transformation - Fanout"}],"connections":{"OpenRouter Chat Model":{"ai_languageModel":[[{"node":"Topic Expansion1","type":"ai_languageModel","index":0}]]},"Structured Output Parser1":{"ai_outputParser":[[{"node":"Topic Expansion1","type":"ai_outputParser","index":0}]]},"Topic Expansion1":{"main":[[{"node":"split primary keywords1","type":"main","index":0},{"node":"Merge Topic Expansion, SV, CPC & KWD1","type":"main","index":1}]]},"Final Keyword Strategy1":{"main":[[{"node":"Update Status - Done1","type":"main","index":0},{"node":"Content Title Extractor","type":"main","index":0},{"node":"Aggregation Node","type":"main","index":0}]]},"Get Input from NocoDB1":{"main":[[{"node":"Set relevant fields1","type":"main","index":0}]]},"Set relevant fields1":{"main":[[{"node":"Topic Expansion1","type":"main","index":0},{"node":"Merge Everything1","type":"main","index":2},{"node":"Update Status - Started1","type":"main","index":0}]]},"Aggregate SV & CPC1":{"main":[[{"node":"Merge SV, CPC & KWD1","type":"main","index":0}]]},"Aggregate KWD1":{"main":[[{"node":"Merge SV, CPC & KWD1","type":"main","index":1}]]},"Merge SV, CPC & KWD1":{"main":[[{"node":"Merge Topic Expansion, SV, CPC & KWD1","type":"main","index":0}]]},"Merge Topic Expansion, SV, CPC & KWD1":{"main":[[{"node":"Merge Everything1","type":"main","index":0}]]},"Merge Everything1":{"main":[[{"node":"Final Keyword Strategy1","type":"main","index":0}]]},"OpenRouter Chat Model4":{"ai_languageModel":[[{"node":"Final Keyword Strategy1","type":"ai_languageModel","index":0}]]},"OpenRouter Chat Model1":{"ai_languageModel":[[{"node":"SEO Content Generator","type":"ai_languageModel","index":0}]]},"OpenRouter Chat Model2":{"ai_languageModel":[[{"node":"Content Title Extractor","type":"ai_languageModel","index":0}]]},"Content Title Extractor":{"main":[[{"node":"Title Extractor Code","type":"main","index":0}]]},"SEO Content Generator":{"main":[[{"node":"Format Output","type":"main","index":0},{"node":"Merge1","type":"main","index":1},{"node":"Aggregation Node","type":"main","index":0}]]},"Format Output":{"main":[[]]},"Aggregation Node":{"main":[[{"node":"Write Content Brief ","type":"main","index":0}]]},"Title Extractor Code":{"main":[[{"node":"SEO Content Generator","type":"main","index":0}]]},"split primary keywords1":{"main":[[{"node":"Search Volume & CPC1","type":"main","index":0},{"node":"Keyword Difficulty1","type":"main","index":0},{"node":"Get Parsed SERP","type":"main","index":0}]]},"Get Parsed SERP":{"main":[[{"node":"Extract Relevant Data from SERP","type":"main","index":0}]]},"Extract Relevant Data from SERP":{"main":[[{"node":"Restructure Data for Scraping","type":"main","index":0}]]},"Restructure Data for Scraping":{"main":[[{"node":"DataForSeo1","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"DataForSeo1":{"main":[[{"node":"Content Aggregation","type":"main","index":0}]]},"OpenRouter Chat Model5":{"ai_languageModel":[[{"node":"Competitor Analysis","type":"ai_languageModel","index":0}]]},"Content Aggregation":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"Data Transformation - Fanout","type":"main","index":0}]]},"Competitor Analysis":{"main":[[{"node":"Aggregate Competitor Analysis","type":"main","index":0}]]},"Aggregate Competitor Analysis":{"main":[[{"node":"Merge Everything1","type":"main","index":1}]]},"Data Transformation - Fanout":{"main":[[{"node":"Competitor Analysis","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"26d5e729-970c-4a5f-84b3-e1eebf62e08f","triggerCount":1,"tags":[]}